#!/bin/bash

VERSION='0.0.1'

#
# Settings
#
MIRROR_PATTERN=${OO_MIRROR_PATTERN-https://codeload.github.com/golang/go/tar.gz/go%s}
BUILD_CMD=./make.bash

#
# Global Vars
#
ROOT_DIR=$(cd -P -- "$(dirname -- "$0")/.." && pwd -P)
VERSIONS_DIR=${ROOT_DIR}/versions
GOROOT_DIR=${ROOT_DIR}/go

#
# Help
#
show_help() {
    cat <<-EOF
Usage: oo [COMMAND]

Commands:
  oo                         Output current go version
  oo ls                      Output versions installed
  oo <version>               Use go <version>
  oo use <version>           Use go <version>
  oo get <version>           Get go <version>
  oo rm <version>            Remove the given version

Options:
  -v, --version               Output oo's version
  -h, --help                  Output this help message
EOF
    exit 0
}

show_version() {
    echo ${VERSION}
    exit 0
}

abort() {
    echo $1 && exit 1
}

#
# Show current version
#
current() {
    test -f ${GOROOT_DIR}/VERSION || abort 'go?'
    printf '%s\n' $(cat ${GOROOT_DIR}/VERSION)
}

#
# List all versions installed
#
list() {
    for file in ${VERSIONS_DIR}/*
    do
        if [ -d ${file} ]; then
            basename ${file}
        fi
    done
}

#
# Use a version
#
use() {
    test -z $1 && show_help
    target_dir=${VERSIONS_DIR}/$1
    test -d ${target_dir} || abort 'not installed'
    # create soft link
    test -f ${GOROOT_DIR} && rm ${GOROOT_DIR}
    test -d ${GOROOT_DIR} && rm -r ${GOROOT_DIR}
    ln -fs ${target_dir} ${GOROOT_DIR}
    printf '=> %s\n' $(cat ${GOROOT_DIR}/VERSION)
}

#
# Remove a version
#
remove() {
    test -z $1 && show_help
    target_dir=${VERSIONS_DIR}/$1
    test -d ${target_dir} || abort 'not installed'

    if [ -d ${GOROOT_DIR} ] && \
        [ $(readlink ${GOROOT_DIR}) = ${target_dir} ]; then
        rm ${GOROOT_DIR} && printf 'go@%s deused\n' $1
    fi

    rm -r ${target_dir}
    printf 'go@%s removed\n' $1
}

#
# Get a version
#
handle_get_sigint() {
    printf '\ncanceled, clean up..\n' $1
    remove $1
    exit 1
}

handle_get_sigtstp() {
    printf '\nstopped, clean up..\n' $1
    remove $1
    exit 1
}

get() {
    test -z $1 && show_help
    version=$1
    tarball_url=$(printf ${MIRROR_PATTERN} ${version})
    target_dir=${VERSIONS_DIR}/${version}
    test -d ${target_dir} && abort 'already installed'
    command -v curl > /dev/null || abort 'curl is required'
    test -d ${target_dir} || mkdir -p ${target_dir}
    trap 'handle_get_sigint ${version}' INT
    trap 'handle_get_sigtstp ${version}' SIGTSTP
    printf 'get %s..\n' ${tarball_url}
    curl -# -L ${tarball_url} | tar xz -C ${target_dir} --strip 1 &> /dev/null

    if [ ${?} != 0 ]; then
        rm -rf ${target_dir} && abort 'bad version'
    fi

    printf 'build %s..\n' $(cat ${target_dir}/VERSION)
    cd ${target_dir}/src && ${BUILD_CMD} &> /dev/null || abort 'build failed'

    use ${version}
}

#
# Main
#
if test $# -eq 0; then
    current
else
    case $1 in
        -v|--version) show_version ;;
        -h|--help|help) show_help ;;
        ls) list ;;
        get) get $2 ;;
        rm) remove $2 ;;
        use) use $2 ;;
        *) use $1 ;;
    esac
fi
