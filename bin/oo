#!/bin/bash

VERSION='0.0.1'

# 
# Settings
#
MIRROR_PATTERN='https://codeload.github.com/golang/go/tar.gz/go%s'
BUILDCMD=./make.bash

#
# Global Vars
#
ROOTDIR=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
VERSIONSDIR=${ROOTDIR}/versions
GOROOTDIR=${ROOTDIR}/go
CURRENTVERSIONFILE=${ROOTDIR}/current_version

#
# Help
#
show_help() {
    cat <<-EOF
Usage: oo [COMMAND]

Commands:
  oo                         Output current go version
  oo ls                      Output versions installed
  oo <version>               Use go <version>
  oo use <version>           Use go <version>
  oo get <version>           Get go <version>
  oo rm <version>            Remove the given version

Options:
  -v, --version               Output oo's version
  -h, --help                  Output this help message
EOF
    exit 0
}

show_version() {
    echo ${VERSION}
    exit 0
}

abort() {
    echo $1 && exit 1
}

#
# Show current version
#
current() {
    test -f ${CURRENTVERSIONFILE} || abort 'nothing'
    printf '%s\n' $(cat ${CURRENTVERSIONFILE})
}

#
# List all versions installed
#
list() {
    for file in ${VERSIONSDIR}/*
    do
        if [ -d ${file} ]; then
            basename ${file}
        fi
    done
}

#
# Use a version
#
use() {
    test -z $1 && show_help
    target_dir=${VERSIONSDIR}/$1
    test -d ${target_dir} || abort 'not installed'
    # create soft link
    test -f ${GOROOTDIR} && rm ${GOROOTDIR}
    test -d ${GOROOTDIR} && rm -r ${GOROOTDIR}
    ln -fs ${target_dir} ${GOROOTDIR}
    printf $1 > ${CURRENTVERSIONFILE}
    printf '=> ' && ${GOROOTDIR}/bin/go version
}

#
# Deuse a version
#
deuse() {
    if [ -f ${CURRENTVERSIONFILE} ] && [ $(cat ${CURRENTVERSIONFILE}) = $1 ]; then
        rm ${CURRENTVERSIONFILE}
        rm ${GOROOTDIR}
    fi
}

#
# Remove a version
#
remove() {
    test -z $1 && show_help
    target_dir=${VERSIONSDIR}/$1
    test -d ${target_dir} || abort 'not installed'
    rm -r ${target_dir}
    deuse $1
    printf 'go@%s removed\n' $1
}

#
# Get a version
#
get() {
    test -z $1 && show_help
    version=$1
    tarball_url=$(printf ${MIRROR_PATTERN} ${version})
    target_dir=${VERSIONSDIR}/${version}
    target_bin=${VERSIONSDIR}/${version}/bin
    echo ${tarball_url}
    test -d ${target_dir} && abort 'already installed'
    command -v curl > /dev/null || abort 'curl is required'
    test -d ${target_dir} || mkdir -p ${target_dir}
    curl -# -L ${tarball_url} | tar xz -C ${target_dir} --strip 1 &> /dev/null

    if [ ${?} != 0 ]; then
        rm -rf ${target_dir} && abort 'bad version'
    fi

    printf 'build go@%s..\n' ${version}
    cd ${target_dir}/src && ${BUILDCMD} &> /dev/null || abort 'build or test failed'

    use ${version}
}

#
# Main
#
if test $# -eq 0; then
    current
else 
    case $1 in 
        -v|--version) show_version ;;
        -h|--help|help) show_help ;;
        ls) list ;;
        get) get $2 ;;
        rm) remove $2 ;;
        use) use $2 ;;
        *) use $1 ;;
    esac
fi
